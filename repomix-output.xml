This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitattributes
.github/workflows/ci.yml
.gitignore
.prettierrc
eslint.config.mjs
index.html
package.json
README.md
shim.d.ts
src/app.vue
src/components/about-component.vue
src/components/contact-component.vue
src/components/content/about.md
src/components/content/contact.md
src/components/content/passion.md
src/components/content/repo.md
src/components/gradient-button-component.vue
src/components/nav-component.vue
src/components/passion-component.vue
src/components/repository-carousel-component.vue
src/components/tooltip-component.vue
src/main.ts
src/services/api.ts
src/style.css
src/vite-env.d.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="README.md">
# Vue 3 + TypeScript + Vite

This template should help get you started developing with Vue 3 and TypeScript in Vite. The template uses Vue 3 `<script setup>` SFCs, check out the [script setup docs](https://v3.vuejs.org/api/sfc-script-setup.html#sfc-script-setup) to learn more.

Learn more about the recommended Project Setup and IDE Support in the [Vue Docs TypeScript Guide](https://vuejs.org/guide/typescript/overview.html#project-setup).
</file>

<file path="shim.d.ts">
declare module "*.vue" {
  import type { ComponentOptions } from "vue";

  const Component: ComponentOptions;
  export default Component;
}

declare module "*.md" {
  import type { ComponentOptions } from "vue";

  const Component: ComponentOptions;
  export default Component;
}
</file>

<file path="src/components/content/about.md">
---
title: "Hi, ich bin Felix"
mainText: "Ich liebe es, mich in neue Themen zu vertiefen, kreative Lösungen zu finden und dabei über mich hinauszuwachsen. Ob beim Programmieren, im Sport oder auf Reisen – ich suche Herausforderungen, die mich fordern und formen.
"
paragraphOne: "Seit meinem Studium der Informatik habe ich eine besondere Leidenschaft für Webentwicklung entwickelt. Der Mix aus technischem Denken und kreativem Gestalten fasziniert mich immer wieder aufs Neue. Ich arbeite gerne strukturiert, aber auch mit dem Blick für das große Ganze – besonders bei Projekten, die echten Mehrwert für andere schaffen.
"

paragraphTwo: "In meiner Freizeit bin ich sportlich unterwegs: Laufen, Tennis und Fußball gehören zu meinem Alltag und helfen mir, einen klaren Kopf zu bewahren. Reisen und das Kennenlernen neuer Kulturen inspirieren mich zusätzlich – sie bringen neue Ideen, Perspektiven und manchmal auch den nötigen Abstand, um mit frischer Energie weiterzumachen.
"
---
</file>

<file path="src/components/content/contact.md">
---
title: "Kontaktiere mich"
subtitle: "Schreibe mir eine E-Mail oder schau auf meinen Social-Media-Kanälen vorbei."

---
</file>

<file path="src/components/content/passion.md">
---
title: "Kreativität. Bewegung. Entdeckung."
sectionTitle: "Meine Leidenschaft"
age: "22 Jahre"
workingStatus: "Student"
---

Ich bin Informatikstudent mit einer Leidenschaft für Technik, Sport und das Erkunden neuer Orte. Besonders begeistert mich die Webentwicklung, da sie Kreativität und technisches Denken perfekt vereint.

Neben dem Studium habe ich den Laufsport für mich entdeckt und trainiere mit dem Ziel, bald an Wettkämpfen teilzunehmen. Tennis und Fußball gehören ebenfalls zu meinen langjährigen Hobbys – der sportliche Ausgleich hält mich fokussiert und motiviert.

Reisen inspiriert mich, neue Kulturen, Menschen und Perspektiven kennenzulernen. Es erweitert nicht nur meinen Horizont, sondern bereichert auch meine Denkweise – ein wichtiger Aspekt, der mir im Berufsleben zugutekommt.
</file>

<file path="src/components/content/repo.md">
---
sectionTitle: "Öffentliche Repositories"
---
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".prettierrc">
{
  "plugins": ["prettier-plugin-tailwindcss"],
  "singleQuote": false,
  "printWidth": 120
}
</file>

<file path="eslint.config.mjs">
// Run this command to generate base config and vs code settings:
// pnpm dlx @antfu/eslint-config@latest

import antfu from "@antfu/eslint-config";
import eslintPluginYml from "eslint-plugin-yml";

export default antfu(
  {
    type: "app",
    typescript: true,
    formatters: true,
    vue: true,
    stylistic: {
      indent: 2,
      semi: true,
      quotes: "double",
    },
  },
  {
    rules: {
      "ts/no-redeclare": "off",
      "ts/consistent-type-definitions": ["error", "type"],
      "no-console": ["off"],
      "antfu/no-top-level-await": ["off"],
      "node/prefer-global/process": ["off"],
      "node/no-process-env": ["off"],
      "perfectionist/sort-imports": [
        "error",
        {
          tsconfigRootDir: ".",
        },
      ],
      "unicorn/filename-case": [
        "error",
        {
          case: "kebabCase",
          ignore: ["README.md"],
        },
      ],
    },
    plugins: [eslintPluginYml.configs["flat/recommended"]],
  },
);
</file>

<file path="src/app.vue">
<script setup lang="ts">
import type { MaybeElement } from "@vueuse/core";
import type { Ref } from "vue";

import { useIntersectionObserver } from "@vueuse/core";
import { Github, Instagram } from "lucide-vue-next";
import { ref, useTemplateRef } from "vue";

import AboutComponent from "./components/about-component.vue";
import ContactMeComponent from "./components/contact-component.vue";
import NavComponent from "./components/nav-component.vue";
import MyPassionComponent from "./components/passion-component.vue";
import RepoScroller from "./components/repository-carousel-component.vue";
import TooltipComponent from "./components/tooltip-component.vue";

function setupIntersectionObserver(target: Ref<MaybeElement, MaybeElement>, visibilityFlag: Ref<boolean, boolean>) {
  useIntersectionObserver(
    target,
    ([entry]) => {
      visibilityFlag.value = entry?.isIntersecting || false;
    },
    { threshold: 0.5 },
  );
}

const homeTargetIsVisible = ref(false);
const aboutTargetIsVisible = ref(false);
const contactTargetIsVisible = ref(false);

const homeTarget = useTemplateRef<MaybeElement>("homeTarget");
const aboutTarget = useTemplateRef<MaybeElement>("aboutTarget");
const contactTarget = useTemplateRef<MaybeElement>("contactTarget");

setupIntersectionObserver(homeTarget, homeTargetIsVisible);
setupIntersectionObserver(aboutTarget, aboutTargetIsVisible);
setupIntersectionObserver(contactTarget, contactTargetIsVisible);
</script>

<template>
  <div class="flex min-h-screen flex-col">
    <header class="fixed top-0 w-full">
      <NavComponent
        :home-target="homeTargetIsVisible"
        :about-target="aboutTargetIsVisible"
        :contact-target="contactTargetIsVisible"
      />
    </header>
    <main>
      <div class="h-full p-8 md:container md:mx-auto">
        <MyPassionComponent ref="homeTarget" class="mb-32 mt-16 md:mb-64 md:mt-32" />
        <RepoScroller class="mb-32 md:mb-64" />

        <div id="about" class="invisible relative -top-32 block" />
        <AboutComponent ref="aboutTarget" class="mb-32 md:mb-64" />
        <div id="contact" class="invisible relative -top-32 block" />
        <ContactMeComponent ref="contactTarget" class="mb-32 md:mb-64" />
      </div>
    </main>

    <footer class="border-t-2 border-blue-800 bg-gray-950 p-8 text-white md:p-16">
      <div>
        <div class="flex font-rubik max-md:flex-col md:items-center md:justify-between">
          <img class="aspect-auto h-auto w-28 max-md:mb-8" src="./assets/logo_light.png" alt="logo">

          <div class="flex gap-16">
            <TooltipComponent>
              <template #trigger>
                <a
                  aria-label="Link to Instagram"
                  class="transition-colors duration-300 hover:text-blue-800"
                  href="https://www.instagram.com/felix.k.02"
                  target="_blank"
                >
                  <Instagram />
                </a>
              </template>
              <span>Instagram</span>
            </TooltipComponent>

            <TooltipComponent>
              <template #trigger>
                <a
                  aria-label="Link to Github"
                  class="transition-colors duration-300 hover:text-blue-800"
                  href="https://github.com/FelixAlexK"
                  target="_blank"
                >
                  <Github />
                </a>
              </template>
              <span>Github</span>
            </TooltipComponent>
          </div>
        </div>
      </div>
      <span class="font-lato ">© 2025 Felix Kuhbier</span>
    </footer>
  </div>
</template>
</file>

<file path="src/components/nav-component.vue">
<script setup lang="ts">
import { useWindowScroll } from "@vueuse/core";
import { Menu, X } from "lucide-vue-next";
import { onUnmounted, ref } from "vue";

const { homeTarget, aboutTarget, contactTarget } = defineProps<{
  homeTarget: boolean;
  aboutTarget: boolean;
  contactTarget: boolean;
}>();

const isOpen = ref(false);

const { y } = useWindowScroll();

function toggleMenu() {
  isOpen.value = !isOpen.value;
  toggleScrollLock();
}

// Function to close menu
function closeMenu() {
  isOpen.value = false;
  toggleScrollLock();
}

function toggleScrollLock() {
  if (isOpen.value) {
    document.body.style.overflow = "hidden";
  }
  else {
    document.body.style.overflow = "";
  }
}

onUnmounted(() => {
  document.body.style.overflow = ""; // Ensure scrolling is restored
});
</script>

<template>
  <div
    :class="{
      'bg-white text-gray-950 shadow-md': y <= 0,
      'bg-gray-950 text-white shadow-lg': y > 5,
    }"
    class="fixed top-0 z-50 flex h-20 w-full items-center justify-between border-b-2 border-blue-800 px-8 transition-all duration-300 md:px-16"
  >
    <!-- Logo -->
    <a href="#">
      <img
        v-if="y <= 0"
        class="aspect-auto h-auto w-24 transition-transform duration-300 hover:scale-105"
        src="../assets/logo.png"
        alt="logo"
      >
      <img
        v-else-if="y > 5"
        class="aspect-auto h-auto w-24 transition-transform duration-300 hover:scale-105"
        src="../assets/logo_light.png"
        alt="logo"
      >
    </a>

    <!-- Desktop Navigation -->
    <nav class="hidden md:flex">
      <ul class="flex items-center gap-8 font-rubik text-lg font-medium">
        <li>
          <a
            :class="{ 'text-blue-800': homeTarget }"
            class="px-4 py-2 rounded-lg transition-colors duration-300 hover:bg-blue-800 hover:text-white"
            href="#"
          >
            Home
          </a>
        </li>
        <li>
          <a
            :class="{ 'text-blue-800': aboutTarget }"
            class="px-4 py-2 rounded-lg transition-colors duration-300 hover:bg-blue-800 hover:text-white"
            href="#about"
          >
            Ich
          </a>
        </li>
        <li>
          <a
            :class="{ 'text-blue-800': contactTarget }"
            class="px-4 py-2 rounded-lg transition-colors duration-300 hover:bg-blue-800 hover:text-white"
            href="#contact"
          >
            Kontakt
          </a>
        </li>
      </ul>
    </nav>

    <!-- Mobile Navigation -->
    <div class="relative z-50 md:hidden">
      <!-- Burger Icon -->
      <button
        class="flex h-10 w-10 items-center justify-center rounded-md focus:outline-none"
        aria-label="Toggle Menu"
        @click="toggleMenu"
      >
        <Menu :class="{ 'text-gray-950': y <= 0, 'text-white': y > 5 }" />
      </button>

      <!-- Mobile Menu Items -->
      <transition name="fade-slide">
        <div
          v-if="isOpen"
          class="fixed left-0 top-0 z-40 flex h-screen w-screen flex-col items-start justify-center bg-gray-950 p-8 text-white"
        >
          <!-- Close Button -->
          <button
            class="absolute right-4 top-4 rounded-md text-2xl focus:outline-none"
            aria-label="Toggle Menu"
            @click="closeMenu"
          >
            <X class="h-10 w-10" />
          </button>

          <!-- Menu Items -->
          <ul class="mt-16 flex flex-col gap-8 font-rubik text-2xl">
            <li>
              <a
                class="p-6 rounded-lg transition-colors duration-300 hover:bg-blue-800 hover:text-white"
                href="#"
                @click="closeMenu"
              >
                Home
              </a>
            </li>
            <li>
              <a
                class="p-6 rounded-lg transition-colors duration-300 hover:bg-blue-800 hover:text-white"
                href="#about"
                @click="closeMenu"
              >
                Ich
              </a>
            </li>
            <li>
              <a
                class="p-6 rounded-lg transition-colors duration-300 hover:bg-blue-800 hover:text-white"
                href="#contact"
                @click="closeMenu"
              >
                Kontakt
              </a>
            </li>
          </ul>
        </div>
      </transition>
    </div>
  </div>
</template>
</file>

<file path="src/components/repository-carousel-component.vue">
<script setup lang="ts">
import { useAsyncState } from "@vueuse/core";
import { ChevronLeft, ChevronRight } from "lucide-vue-next";
import { ref } from "vue";

import { frontmatter } from "../components/content/repo.md";
import { getUserPublicRepos, getUserUsedLanguagesFromRepos } from "../services/api";
import ButtonComponent from "./gradient-button-component.vue";

const currentScrollIndex = ref(0);

const { state, isReady, isLoading } = useAsyncState(
  getUserPublicRepos("FelixAlexK").then(data => data),
  [],
);

function scrollLeftOrRight(direction: "left" | "right") {
  const scrollLimit = state.value.length - 1;

  if (direction === "left") {
    if (currentScrollIndex.value === 0) {
      currentScrollIndex.value = scrollLimit;
    }
    else {
      currentScrollIndex.value -= 1;
    }
  }
  else {
    if (currentScrollIndex.value === scrollLimit) {
      currentScrollIndex.value = 0;
    }
    else {
      currentScrollIndex.value += 1;
    }
  }
}
</script>

<template>
  <div class="hidden h-96 w-full flex-col items-center rounded-3xl bg-gradient-to-r from-gray-100 to-gray-200 p-8 shadow-lg md:flex">
    <span class="mb-4 flex w-full justify-start font-rubik text-sm text-blue-800 uppercase tracking-wide">
      {{ frontmatter.sectionTitle }}
    </span>
    <div class="flex h-full w-full flex-col items-center justify-center">
      <div class="flex w-full flex-row items-center justify-between">
        <!-- Left Scroll Button -->
        <button
          aria-label="scroll left"
          class="rounded-full hover:bg-blue-800 bg-gray-300 p-3 text-white shadow-md transition-transform duration-300 hover:scale-110"
          @click="() => scrollLeftOrRight('left')"
        >
          <ChevronLeft />
        </button>

        <!-- Repository Content -->
        <div v-if="isReady" class="w-2/3">
          <div v-if="state[currentScrollIndex]" class="flex flex-col items-center text-center">
            <h3 class="mb-4 font-lato text-4xl font-bold text-gray-900">
              {{ state[currentScrollIndex].name }}
            </h3>
            <p class="mb-8 max-h-20 overflow-hidden whitespace-normal font-rubik text-lg text-gray-700">
              {{ state[currentScrollIndex].description || "Keine Beschreibung verfügbar." }}
            </p>

            <ButtonComponent :href="state[currentScrollIndex].html_url" text="Repository ansehen" />
          </div>
          <div v-else class="flex flex-col items-center gap-8">
            <h3 class="font-lato text-4xl font-bold text-gray-900">
              Loading...
            </h3>
          </div>
        </div>

        <!-- Skeleton Loader -->
        <v-skeleton-loader
          v-if="isLoading"
          type="heading, paragraph, button"
          class="w-2/3"
          style="background-color: transparent"
        />

        <!-- Right Scroll Button -->
        <button
          aria-label="scroll right"
          class="rounded-full hover:bg-blue-800 bg-gray-300 p-3 text-white shadow-md transition-transform duration-300 hover:scale-110"
          @click="() => scrollLeftOrRight('right')"
        >
          <ChevronRight />
        </button>
      </div>
    </div>
  </div>
</template>
</file>

<file path="src/components/tooltip-component.vue">
<script setup lang="ts">
import { ref } from "vue";

const show = ref(false);
</script>

<template>
  <div
    class="relative flex items-center transition-transform duration-300"
    @mouseenter="show = true"
    @mouseleave="show = false"
  >
    <!-- Trigger element -->
    <slot name="trigger" />

    <!-- Tooltip -->
    <div
      v-if="show"
      class="absolute bottom-full left-1/2 z-10 mb-2 -translate-x-1/2 transform rounded bg-gray-800 px-2 py-1 text-sm text-white shadow-lg"
    >
      <slot />
    </div>
  </div>
</template>
</file>

<file path="tsconfig.app.json">
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

    /* Linting */
    "strict": true,
    "noFallthroughCasesInSwitch": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue", "src/**/*.md"]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "moduleDetection": "force",
    "module": "ESNext",

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,

    /* Linting */
    "strict": true,
    "noFallthroughCasesInSwitch": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noEmit": true,
    "isolatedModules": true,
    "skipLibCheck": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="src/components/about-component.vue">
<script setup lang="ts">
import { frontmatter } from "../components/content/about.md";
import ButtonComponent from "./gradient-button-component.vue";
</script>

<template>
  <section v-once class="py-16">
    <div class="flex w-full flex-col gap-12 px-8 md:flex-row md:gap-24 md:px-16">
      <!-- Left Section -->
      <div class="flex w-full flex-col items-center md:w-1/3 md:items-start">
        <h2 class="mb-8 font-lato text-4xl font-semibold text-gray-900 md:text-6xl">
          {{ frontmatter.title }}
        </h2>
        <picture>
          <!-- Modern format (WebP) -->
          <source
            srcset="../assets/IMG_1877.webp"
            type="image/webp"
            class="aspect-square w-80 rounded-3xl object-cover object-center shadow-lg md:mb-16"
            loading="lazy"
          >

          <!-- Fallback format (JPEG/PNG) -->
          <source
            srcset="../assets/IMG_1877.JPEG"
            type="image/jpeg"
            class="aspect-square w-80 rounded-3xl object-cover object-center shadow-lg md:mb-16"
            loading="lazy"
          >

          <!-- Default fallback for unsupported browsers -->
          <img
            src="../assets/IMG_1877.JPEG"
            alt="Picture of Felix"
            class="aspect-square w-80 rounded-3xl object-cover object-center shadow-lg md:mb-16"
            loading="lazy"
          >
        </picture>
        <ButtonComponent
          href="#contact"
          text="Kontakt"
          class="mt-8 bg-gradient-to-r from-blue-800 via-blue-600 to-blue-500 text-white shadow-md hover:scale-105 hover:shadow-lg"
        />
      </div>

      <!-- Right Section -->
      <div class="flex w-full flex-col gap-8 md:mt-8 md:w-2/3 md:gap-16">
        <span class="font-rubik text-xl leading-8 text-gray-800 md:text-2xl">
          {{ frontmatter.mainText }}        </span>

        <div class="flex flex-col gap-8 md:flex-row">
          <span class="font-rubik text-base text-gray-700 md:text-lg">
            {{ frontmatter.paragraphOne }}          </span>

          <span class="font-rubik text-base text-gray-700 md:text-lg">
            {{ frontmatter.paragraphTwo }}
          </span>
        </div>
      </div>
    </div>
  </section>
</template>
</file>

<file path="src/components/gradient-button-component.vue">
<script setup lang="ts">
const { text = "Button" } = defineProps<{
  text?: string;
  href?: string;
}>();

defineEmits(["click"]);
</script>

<template>
  <div class="hidden md:block">
    <template v-if="href">
      <!-- Render as an anchor link if `href` is provided -->
      <a
        :href="href"
        class="rounded-2xl bg-gradient-to-tr from-blue-800 via-blue-600 to-blue-500 px-16 py-4 font-rubik text-lg font-medium text-white shadow-md transition-transform duration-300 hover:scale-105 hover:shadow-lg"
      >
        {{ text }}
      </a>
    </template>
    <template v-else>
      <button
        class="rounded-2xl bg-gradient-to-r from-blue-800 via-blue-600 to-blue-500 px-16 py-4 font-rubik text-lg font-medium text-white shadow-md transition-transform duration-300 hover:scale-105 hover:shadow-lg "
        @click="$emit('click')"
      >
        {{ text }}
      </button>
    </template>
  </div>
</template>
</file>

<file path="tsconfig.json">
{
  "references": [{ "path": "./tsconfig.app.json" }, { "path": "./tsconfig.node.json" }],
  "files": []
}
</file>

<file path=".gitattributes">
*.png filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.webp filter=lfs diff=lfs merge=lfs -text
</file>

<file path="src/components/contact-component.vue">
<script setup lang="ts">
import { Copy, Github, Instagram } from "lucide-vue-next";
import { ref } from "vue";

import { frontmatter } from "../components/content/contact.md";
import TooltipComponent from "./tooltip-component.vue";

const copied = ref(false);
const email = ref<string | undefined>(import.meta.env.VITE_EMAIL as string);
let intervalIdCopying: ReturnType<typeof setInterval> | undefined;

function copyToClipboard() {
  navigator.clipboard
    .writeText(email.value!)
    .then(() => {
      copied.value = true;
    })
    .catch((err) => {
      console.error("Fehler beim Kopieren: ", err);
      copied.value = false;
    });

  if (intervalIdCopying) {
    clearInterval(intervalIdCopying);
  }

  intervalIdCopying = setInterval(() => {
    copied.value = false;
    clearInterval(intervalIdCopying);
    intervalIdCopying = undefined;
  }, 3000);
}
</script>

<template>
  <section v-if="email" class="py-16">
    <div class="w-full p-8 md:p-16 border border-blue-800 rounded-3xl shadow-lg bg-white">
      <h2 class="mb-4 font-lato text-4xl font-bold text-gray-900 md:text-6xl">
        {{ frontmatter.title }}
      </h2>
      <p class="mb-12 font-rubik text-base text-gray-700 md:text-lg">
        {{ frontmatter.subtitle }}
      </p>
      <div class="mb-12 flex flex-col items-start gap-4 md:flex-row md:items-center">
        <span class="font-rubik text-xl font-bold text-gray-800 md:text-2xl">{{ email }}</span>
        <button
          aria-label="copy email"
          class="relative flex items-center gap-2 rounded bg-blue-800 px-4 py-2 text-white shadow-md transition-transform duration-300 hover:scale-105 hover:shadow-lg"
          @click="copyToClipboard"
        >
          <Copy />
          <span>Kopieren</span>
        </button>
        <Transition :duration="550" name="nested">
          <div
            v-if="copied"
            class="relative z-10 rounded bg-green-500 px-4 py-1 font-rubik text-xs text-white shadow-lg md:text-sm"
          >
            <span>kopiert</span>
          </div>
        </Transition>
      </div>
      <div class="flex justify-center gap-16">
        <TooltipComponent>
          <template #trigger>
            <a
              aria-label="Link to Instagram"
              class="transition-transform duration-300 hover:scale-110 hover:text-blue-800"
              href="https://www.instagram.com/felix.k.02"
              target="_blank"
            >
              <Instagram />
            </a>
          </template>
          <span>Instagram</span>
        </TooltipComponent>

        <TooltipComponent>
          <template #trigger>
            <a
              aria-label="Link to Github"
              class="transition-transform duration-300 hover:scale-110 hover:text-blue-800"
              href="https://github.com/FelixAlexK"
              target="_blank"
            >
              <Github />
            </a>
          </template>
          <span>Github</span>
        </TooltipComponent>
      </div>
    </div>
  </section>
</template>

<style lang="css">
.nested-enter-active,
.nested-leave-active {
  transition: all 0.3s ease-in-out;
}

.nested-leave-active {
  transition-delay: 0.25s;
}

.nested-enter-from,
.nested-leave-to {
  transform: translatex(30px);
  opacity: 0;
}

.nested-enter-active {
  transition-delay: 0.25s;
}

.nested-enter-from,
.nested-leave-to {
  transform: translateX(30px);
  opacity: 0.001;
}
</style>
</file>

<file path="src/components/passion-component.vue">
<script setup lang="ts">
import Content, { frontmatter } from "../components/content/passion.md";
import ButtonComponent from "./gradient-button-component.vue";
</script>

<template>
  <section v-once class="h-auto py-16  ">
    <div class="w-full px-8 md:px-16">
      <div class="flex h-full flex-col-reverse gap-16 md:flex-row">
        <!-- Left Section -->
        <div class="flex flex-col md:w-1/2">
          <span class="mb-2 font-rubik text-sm uppercase tracking-wide text-blue-800 md:text-base">
            {{ frontmatter.sectionTitle }}
          </span>
          <h2 class="mb-6 font-lato text-4xl font-extrabold text-gray-900 md:text-5xl lg:text-6xl">
            {{ frontmatter.title }}
          </h2>
          <p class="font-rubik text-base text-gray-700 md:mb-12 md:max-w-prose md:text-lg">
            <Content />
          </p>
          <ButtonComponent href="#about" text="Das bin ich" />
        </div>

        <!-- Right Section -->
        <div class="flex flex-col items-center gap-12 md:w-1/2 md:justify-center-safe ">
          <div class="flex flex-col items-start">
            <span
              class="mb-2 bg-gradient-to-tr from-blue-800 via-blue-600 to-blue-500 bg-clip-text text-6xl font-extrabold text-transparent text-nowrap"
            >
              {{ frontmatter.age }}
            </span>
            <span class="font-lato text-2xl text-gray-800">Alter</span>
          </div>
          <div class="flex flex-col items-start">
            <span
              class="mb-2 bg-gradient-to-tr from-blue-800 via-blue-600 to-blue-500 bg-clip-text text-6xl font-extrabold text-transparent"
            >
              {{ frontmatter.workingStatus }}
            </span>
            <span class="font-lato text-2xl text-gray-800">Berufsstatus</span>
          </div>
        </div>
      </div>
    </div>
  </section>
</template>
</file>

<file path="src/style.css">
@import url("https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Rubik:ital,wght@0,300..900;1,300..900&display=swap");
@import "tailwindcss";

@theme {
  --font-rubik: "Rubik", sans-serif;
  --font-lato: "Lato", sans-serif;
}
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local
.env

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="vite.config.ts">
import tailwindcss from "@tailwindcss/vite";
import vue from "@vitejs/plugin-vue";
import { defineConfig } from "vite";
import Markdown from "vite-plugin-md";
// https://vite.dev/config/
export default defineConfig({
  plugins: [
    vue({
      include: [/\.vue$/, /\.md$/],
    }),
    Markdown(),
    tailwindcss(),
  ],
  assetsInclude: ["**/*.JPEG", "**/*.jpeg", "**/*.jpg"],
});
</file>

<file path="src/main.ts">
import { createApp } from "vue";

import App from "./app.vue";
import "./style.css";

const app = createApp(App);

app.mount("#app");
</file>

<file path="src/services/api.ts">
import axios from "axios";

export type Repository = {
  name: string;
  description: string;
  html_url: string;
};

const GITHUB_API_URL = "https://api.github.com";
const token = import.meta.env.VITE_GITHUB_TOKEN as string;

export async function getUserPublicRepos(username: string, accessToken: string = token) {
  try {
    const response = await axios.get(`${GITHUB_API_URL}/users/${username}/repos`, {

      headers: {
        Authorization: `token ${accessToken}`,
      },
    });

    const repositories: Repository[] = response.data.map((repo: any) => ({
      name: repo.name || "",
      description: repo.description,
      html_url: repo.html_url,
    }));

    return repositories;
  }
  catch (error) {
    console.error("Error fetching public repositories:", error);
    throw error;
  }
}

export async function getUserUsedLanguagesFromRepos(username: string, accessToken: string = token) {
  try {
    const repositoriesResponse = await getUserPublicRepos(username, accessToken);
    console.log("repositoriesResponse", repositoriesResponse);
    const repositories = repositoriesResponse.map((repo: Repository) => ({
      name: repo.name,
    }));

    const languagesResponse = [];

    for (const repo of repositories) {
      const response = await axios.get(`${GITHUB_API_URL}/repos/${username}/${repo.name}/languages`, {
        headers: {
          "Authorization": `token ${accessToken}`,
          "Content-Type": "application/vnd.github+json",
        },
      });

      languagesResponse.push(response.data);
    }

    console.log("languagesResponse", languagesResponse);

    const languages = languagesResponse.reduce((acc: any, curr: any) => {
      for (const [key, value] of Object.entries(curr)) {
        if (acc[key]) {
          acc[key] += value;
        }
        else {
          acc[key] = value;
        }
      }
      return acc;
    }, {});

    return languages;
  }
  catch (error) {
    console.error("Error fetching public repositories:", error);
    throw error;
  }
}
</file>

<file path=".github/workflows/ci.yml">
name: CI

on:
  push:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run lint
        run: bun run lint
</file>

<file path="package.json">
{
  "name": "portfolio_2024",
  "type": "module",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc -b && vite build",
    "preview": "vite preview",
    "format": "prettier --write .",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix"
  },
  "dependencies": {
    "@emailjs/browser": "^4.4.1",
    "@fontsource/lato": "^5.1.1",
    "@fontsource/rubik": "^5.1.1",
    "@spotify/web-api-ts-sdk": "^1.2.0",
    "@tailwindcss/vite": "^4.1.5",
    "@types/axios": "^0.14.4",
    "@types/bun": "^1.2.4",
    "@types/eslint-config-prettier": "^6.11.3",
    "@types/node": "^22.15.17",
    "@vueuse/core": "^12.7.0",
    "axios": "^1.8.1",
    "buttercms": "^3.0.2",
    "eslint-config-prettier": "^10.0.2",
    "eslint-plugin-prettier": "^5.2.3",
    "lucide-vue-next": "^0.473.0",
    "marked": "^15.0.11",
    "prettier-eslint": "^16.3.0",
    "vue": "^3.5.13",
    "vuetify": "^3.7.14"
  },
  "devDependencies": {
    "@antfu/eslint-config": "^4.3.0",
    "@eslint/js": "^9.21.0",
    "@tailwindcss/typography": "^0.5.16",
    "@vitejs/plugin-vue": "^5.2.1",
    "@vue/tsconfig": "^0.7.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.21.0",
    "eslint-plugin-format": "^1.0.1",
    "eslint-plugin-vue": "^9.32.0",
    "globals": "^15.15.0",
    "prettier": "^3.5.2",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "tailwindcss": "^4.1.5",
    "typescript": "~5.7.3",
    "typescript-eslint": "^8.25.0",
    "vite": "^6.2.0",
    "vite-plugin-md": "^0.21.5",
    "vue-tsc": "^2.2.4"
  }
}
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta property="og:title" content="Felix K." />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://iamfelixk.de/" />
    <meta property="og:image" content="./src/assets/logo.png" />
    <meta og:image:type content="image/png" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:description" content="A portfolio website by Felix K." />
    <meta name="description" content="A portfolio website by Felix K." />
    <link rel="icon" sizes="32x32" href="/favicon-32x32.png" media="(prefers-color-scheme: light)" />
    <link rel="icon" sizes="32x32" href="/favicon-32x32_light.png" media="(prefers-color-scheme: dark)" />
    <link href="/src/styles.css" rel="stylesheet" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Felix K.</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

</files>
